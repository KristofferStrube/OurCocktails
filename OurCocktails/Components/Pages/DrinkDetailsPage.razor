@page "/Drink/{DrinkUrl}/{IgnoredName?}/"
@attribute [StreamRendering]
@implements IDisposable
@inject IStorage Storage
@inject PersistentComponentState PersistentComponentState

<PageTitle>Our Cocktails - @(drink?.Name ?? IgnoredName)</PageTitle>

<h2>
    @if (drink is null)
    {
        <text>&nbsp;</text>
    }
    else
    {
        @drink.Name
        <a href="/drink/edit/@DrinkUrl" style="float:right;">
            <svg class="bi" viewBox="0 0 16 16">
                <polygon stroke="#FFFFFF" stroke-width="2" fill="none" points="2,14 3,10 9,4 12,7 6,13"></polygon>
                <polygon stroke="#FFFFFF" stroke-width="2" fill="none" points="9,4 11,2 14,5 12,7"></polygon>
            </svg>
        </a>
    }
</h2>
<div class="content">
    <div>
        <div class="img-container">
            @if (drink?.Images.FirstOrDefault() is { } firstImage)
            {
                <img src="@firstImage" />
            }
        </div>
    </div>
    @if (drink is not null)
    {
        <div class="description">
            <p>
                @drink.Summary @drink.Description
            </p>
            <div>
                <h3>
                    Recipe
                </h3>
                @(new MarkupString(drink.RecipeAsHtml))
            </div>
            <div>
                <IngredientLinesPresenter Ingredients="drink.Ingredients" @rendermode=InteractiveWebAssembly />
            </div>
        </div>
    }
</div>

<br />

@code {
    private Drink? drink;
    private PersistingComponentStateSubscription persistingSubscription;

    [Parameter]
    public required string DrinkUrl { get; set; }

    [Parameter]
    public string? IgnoredName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        if (PersistentComponentState.TryTakeFromJson<Drink>(
            "drink", out var restored))
        {
            drink = restored!;
        }
        else
        {
            drink = await Storage.GetDrink(DrinkUrl);
        }
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson("drink", drink);

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        persistingSubscription.Dispose();
    }
}